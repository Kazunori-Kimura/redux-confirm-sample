{"version":3,"sources":["logo.svg","stores/message.ts","components/MessageDialog.tsx","App.tsx","stores/index.ts","index.tsx"],"names":["slice","createSlice","name","initialState","title","message","dialogType","clicked","reducers","showMessage","state","action","dialogId","payload","undefined","show","okMessage","cancelMessage","actions","MessageDialog","useSelector","dispatch","useDispatch","handleClose","handleClickOk","Dialog","open","scroll","onClose","DialogTitle","DialogContent","DialogContentText","component","DialogActions","Button","onClick","color","DIALOG_ID","App","useState","display","setDisplay","useEffect","className","src","logo","alt","href","target","rel","variant","rootReducer","combineReducers","reducer","createStore","middlewares","getDefaultMiddleware","configureStore","middleware","devTools","process","store","theme","createMuiTheme","overrides","MuiCssBaseline","body","overflowX","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.72b47d7a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport type DialogType = 'confirm' | 'message';\nexport type ClickedButton = 'ok' | 'cancel';\n\n/**\n * メッセージダイアログのstore\n */\nexport interface MessageStateAttributes {\n    dialogId?: string;\n    title: string;\n    message: string;\n    dialogType: DialogType;\n    show?: boolean;\n    // dialogId ごとにクリックされたボタンを保持\n    clicked?: Record<string, ClickedButton | undefined>;\n}\n\n/**\n * 初期値\n */\nconst initialState: MessageStateAttributes = {\n    title: 'メッセージ',\n    message: '',\n    dialogType: 'message',\n    clicked: {},\n};\n\nconst slice = createSlice({\n    name: 'message',\n    initialState,\n    reducers: {\n        /**\n         * メッセージダイアログを表示する\n         */\n        showMessage: (\n            state: MessageStateAttributes,\n            action: PayloadAction<MessageStateAttributes>\n        ) => {\n            const { dialogId } = action.payload;\n            const clicked = { ...state.clicked };\n\n            if (dialogId) {\n                // 押されたボタンの状態を初期化\n                // 注意！ おなじダイアログが複数同時に表示されることを考慮していません\n                clicked[dialogId] = undefined;\n            }\n\n            return {\n                ...state,\n                ...action.payload,\n                // メッセージダイアログを表示\n                show: true,\n                clicked,\n            };\n        },\n        /**\n         * okボタンのクリック\n         */\n        okMessage: (\n            state: MessageStateAttributes,\n            action: PayloadAction<MessageStateAttributes>\n        ) => {\n            const { dialogId } = action.payload;\n            const clicked = { ...state.clicked };\n\n            if (dialogId) {\n                // 押されたボタンをセット\n                clicked[dialogId] = 'ok';\n            }\n\n            return {\n                ...state,\n                ...action.payload,\n                // メッセージダイアログを閉じる\n                show: false,\n                clicked,\n            };\n        },\n        /**\n         * キャンセルボタンのクリック\n         */\n        cancelMessage: (\n            state: MessageStateAttributes,\n            action: PayloadAction<MessageStateAttributes>\n        ) => {\n            const { dialogId } = action.payload;\n            const clicked = { ...state.clicked };\n\n            if (dialogId) {\n                // 押されたボタンをセット\n                clicked[dialogId] = 'cancel';\n            }\n\n            return {\n                ...state,\n                ...action.payload,\n                // メッセージダイアログを閉じる\n                show: false,\n                clicked,\n            };\n        },\n    },\n});\n\nexport const { showMessage, okMessage, cancelMessage } = slice.actions;\nexport default slice;\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n} from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../stores';\nimport { okMessage, cancelMessage } from '../stores/message';\n\nconst MessageDialog: React.FC = () => {\n    const message = useSelector((state: RootState) => state.message);\n    const dispatch = useDispatch();\n\n    /**\n     * キャンセルボタンクリック\n     */\n    const handleClose = () => {\n        dispatch(\n            cancelMessage({\n                ...message,\n            })\n        );\n    };\n\n    /**\n     * OKボタンクリック\n     */\n    const handleClickOk = () => {\n        dispatch(\n            okMessage({\n                ...message,\n            })\n        );\n    };\n\n    return (\n        <Dialog open={message.show ?? false} scroll=\"paper\" onClose={handleClose}>\n            <DialogTitle>{message.title}</DialogTitle>\n            <DialogContent>\n                <DialogContentText component=\"div\">{message.message}</DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                {message.dialogType === 'confirm' && (\n                    <>\n                        <Button onClick={handleClose}>キャンセル</Button>\n                        <Button color=\"primary\" onClick={handleClickOk}>\n                            OK\n                        </Button>\n                    </>\n                )}\n                {message.dialogType === 'message' && (\n                    <Button color=\"primary\" onClick={handleClickOk}>\n                        OK\n                    </Button>\n                )}\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default MessageDialog;\n","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button } from '@material-ui/core';\nimport MessageDialog from './components/MessageDialog';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from './stores';\nimport { showMessage } from './stores/message';\n\nconst DIALOG_ID = 'sample';\n\nconst App: React.FC = () => {\n    const [display, setDisplay] = useState(false);\n\n    const dispatch = useDispatch();\n    const message = useSelector((state: RootState) => state.message);\n\n    const handleClick = () => {\n        dispatch(\n            showMessage({\n                dialogId: DIALOG_ID,\n                title: 'test',\n                message: '確認してください',\n                dialogType: 'confirm',\n            })\n        );\n    };\n\n    useEffect(() => {\n        if (\n            message.dialogId === DIALOG_ID &&\n            message.clicked &&\n            message.clicked[DIALOG_ID] === 'ok'\n        ) {\n            // OKが押された\n            setDisplay(true);\n        }\n    }, [message.clicked, message.dialogId]);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n                <br />\n                <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\n                    Confirm表示\n                </Button>\n\n                {display && <p>OKが押された</p>}\n            </header>\n\n            <MessageDialog />\n        </div>\n    );\n};\n\nexport default App;\n","import { combineReducers, configureStore, getDefaultMiddleware, Store } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport message from './message';\n\nconst rootReducer = combineReducers({\n    message: message.reducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type ReduxStore = Store<RootState>;\n\nconst createStore = (): ReduxStore => {\n    const middlewares = [...getDefaultMiddleware()];\n\n    if (process.env.NODE_ENV === 'development') {\n        middlewares.push(logger);\n    }\n\n    const store = configureStore({\n        reducer: rootReducer,\n        middleware: middlewares,\n        devTools: process.env.NODE_ENV === 'development',\n    });\n\n    return store;\n};\n\nexport default createStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport createStore from './stores';\nimport { Provider } from 'react-redux';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\n\nconst store = createStore();\n\nconst theme = createMuiTheme({\n    overrides: {\n        MuiCssBaseline: {\n            '@global': {\n                body: {\n                    overflowX: 'hidden',\n                },\n            },\n        },\n    },\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <App />\n            </ThemeProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}